#!/bin/bash
set -o nounset -o pipefail -o errexit -o privileged
function usage {
cat <<USAGE
 USAGE: CAdir (--syslog|--stdout|--quiet)? <directory>

  Serves signing and other requests, received on STDIN, using the certificate
  authority and metadata in the given directory.
USAGE
}

declare -A CAdir=( [root]="" [output]=stdout )
while [[ "${1:-}" != "" ]]
do
  case "${1:-}" in
    -h|'-?'|--help)                     usage ; exit 0 ;;
    --syslog|--stdout|--quiet)          CAdir[output]=${1#--} ;;
    /*|~/*|./*|../*)                    CAdir[root]="$1" ;;
  esac
  shift
done

d=CAdir


## Logging niceties.

function stamp      {           date --utc +%FT%T.%4NZ                       ;}
function msg        {           printf "%s\n" "$1" 1>&2                      ;}
function info       {           msg "$1"                                     ;}
function err        {           msg "$1" ; return 1                          ;}
function locktee    {           flock -w 0.5 -x ./$d/log tee -a ./$d/log     ;}
function syslog     {           logger -i -t CAdir -p user.info              ;}
function outERR     {           echo "ERR ${CAdir[uuid]}    $@"              ;}
function outOK      {           echo "OK  ${CAdir[uuid]}    $@"              ;}


declare -a CAdirOP
declare -a CAdirERR
function setup_request {
  local -a argv
  read -r -n128 -a argv || true # Short, unterminated input; not a problem.
  if [[ -z "${argv+isset}" ]]
  then
    CAdirERR='Malformed request.'
  else
    set -- "${argv[@]}"
    case "${1:-}" in
      crt)          shift ;;
      crl)          shift ;;
      sign)         shift
                    case "${1:-}" in
                      CA)       shift ;;
                      '')       : ;;
                    esac ;;
      *)            CAdirERR='Invalid request type.' ;;
    esac
  fi
  if [[ -z "${CAdirERR:+isset}" ]]
  then
    if [[ "$#" = 0 ]]
    then
      CAdirOP="${argv[@]}" # All arguments consumed; request is valid.
    else
      CAdirERR='Invalid arg for request.' # Bad request.
    fi
  fi
}


function perform_request {
  local txt
  case "${CAdirOP[0]}" in
    sign) cat > ./CAdir/input
          local key_opt=''
          [[ ! -f ca.plain.key ]] || key_opt='-keyfile ca.plain.key'
          if openssl ca -config ./openssl.cnf -batch -utf8 $key_opt \
                        -in ./CAdir/input -out ./CAdir/output
          then
            txt="$(sed -n '/^-----BEGIN CERTIFICATE-----$/,$ p' ./CAdir/output)"
          else
            CAdirERR='Could not sign.' ; return 1
          fi ;;
    crt)  txt="$(cat ./ca.crt)" ;;
    crl)  txt="$(openssl ca -config ./openssl.cnf -utf8 -gencrl)" ;;
    *)    CAdirERR='Bad request.' ; return 1 ;;
  esac
  if [[ 0 != $? ]]
  then
    CAdirERR='Processing error.'
    err "Exit status \`$?'."
  else
    outOK "${CAdirOP[0]}"
    cat <<<"$txt"
  fi
}


function serve {
  local user="$(whoami)"
  info "Request received; user is \`$user'."
  [[ -n "${CAdir[root]}" ]] || err "No CA dir given."
  if cd "${CAdir[root]}" 1>/dev/null 2>&1
  then
    info "Changed directory to \`${CAdir[root]}'."
  else
    err "Failed to change directory to \`${CAdir[root]}'."
  fi
  [[ -d ./$d ]] || { info "Creating \`./$d'." ; mkdir -p ./$d ;}
  setup_request
  [[ -z "${CAdirERR:+isset}" ]] || err "$CAdirERR"
  local dir=$(pwd -P)
  info "Locking \`$dir/$d/log'."
  CAdir[uuid]=$(uuidgen | tr A-F a-f) # Enforce lowercase for Macs.
  exec 4>&1
  { info "((( ${CAdir[uuid]} began: $(stamp)"
    info "user: $user"
    info "$(echo command: "${CAdirOP[@]}")"
    perform_request ||
    { CAdirERR=${CAdirERR:-Bad request.}
      outERR "$CAdirERR"
      info "err: $CAdirERR"              ;}
    info "))) ${CAdir[uuid]} ended: $(stamp)"
    [[ -z "${CAdirERR:+isset}" ]] || exit 1   ;} 2>&1 1>&4 | locktee 4>&1 1>&2
  info "Unlocked."
}


TOKEN=0fee81f3d3a91f102958bdc7f23aa6a5840a9380
if fgrep -q $TOKEN "$0"
then
  exec 3>&1
  serve 2>&1 1>&3 | case ${CAdir[output]} in
                      stdout)      cat ;;
                      syslog)      syslog ;;
                      quiet)       cat >/dev/null ;;
                    esac 3>&1 1>&2
fi

